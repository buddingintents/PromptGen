// Generated by view binder compiler. Do not edit!
package com.buddingintents.promptgen.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.Guideline;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.buddingintents.promptgen.R;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivitySettingsBinding implements ViewBinding {
  @NonNull
  private final View rootView;

  @NonNull
  public final Button btnDelete;

  @NonNull
  public final Button btnSave;

  @NonNull
  public final Button btnSetActive;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final MaterialCardView cardActiveProvider;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final MaterialCardView cardConfiguredProviders;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final MaterialCardView cardProviderConfig;

  @NonNull
  public final EditText etApiKey;

  @NonNull
  public final EditText etCustomModel;

  @NonNull
  public final EditText etEndpoint;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final Guideline guidelineVertical;

  @NonNull
  public final RecyclerView rvConfiguredProviders;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final ScrollView scrollConfig;

  @NonNull
  public final Spinner spinnerProvider;

  @NonNull
  public final TextView tvActiveProvider;

  @NonNull
  public final TextView tvProviderNotes;

  @NonNull
  public final TextView tvTitle;

  private ActivitySettingsBinding(@NonNull View rootView, @NonNull Button btnDelete,
      @NonNull Button btnSave, @NonNull Button btnSetActive,
      @Nullable MaterialCardView cardActiveProvider,
      @Nullable MaterialCardView cardConfiguredProviders,
      @Nullable MaterialCardView cardProviderConfig, @NonNull EditText etApiKey,
      @NonNull EditText etCustomModel, @NonNull EditText etEndpoint,
      @Nullable Guideline guidelineVertical, @NonNull RecyclerView rvConfiguredProviders,
      @Nullable ScrollView scrollConfig, @NonNull Spinner spinnerProvider,
      @NonNull TextView tvActiveProvider, @NonNull TextView tvProviderNotes,
      @NonNull TextView tvTitle) {
    this.rootView = rootView;
    this.btnDelete = btnDelete;
    this.btnSave = btnSave;
    this.btnSetActive = btnSetActive;
    this.cardActiveProvider = cardActiveProvider;
    this.cardConfiguredProviders = cardConfiguredProviders;
    this.cardProviderConfig = cardProviderConfig;
    this.etApiKey = etApiKey;
    this.etCustomModel = etCustomModel;
    this.etEndpoint = etEndpoint;
    this.guidelineVertical = guidelineVertical;
    this.rvConfiguredProviders = rvConfiguredProviders;
    this.scrollConfig = scrollConfig;
    this.spinnerProvider = spinnerProvider;
    this.tvActiveProvider = tvActiveProvider;
    this.tvProviderNotes = tvProviderNotes;
    this.tvTitle = tvTitle;
  }

  @Override
  @NonNull
  public View getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySettingsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySettingsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_settings, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySettingsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnDelete;
      Button btnDelete = ViewBindings.findChildViewById(rootView, id);
      if (btnDelete == null) {
        break missingId;
      }

      id = R.id.btnSave;
      Button btnSave = ViewBindings.findChildViewById(rootView, id);
      if (btnSave == null) {
        break missingId;
      }

      id = R.id.btnSetActive;
      Button btnSetActive = ViewBindings.findChildViewById(rootView, id);
      if (btnSetActive == null) {
        break missingId;
      }

      id = R.id.cardActiveProvider;
      MaterialCardView cardActiveProvider = ViewBindings.findChildViewById(rootView, id);

      id = R.id.cardConfiguredProviders;
      MaterialCardView cardConfiguredProviders = ViewBindings.findChildViewById(rootView, id);

      id = R.id.cardProviderConfig;
      MaterialCardView cardProviderConfig = ViewBindings.findChildViewById(rootView, id);

      id = R.id.etApiKey;
      EditText etApiKey = ViewBindings.findChildViewById(rootView, id);
      if (etApiKey == null) {
        break missingId;
      }

      id = R.id.etCustomModel;
      EditText etCustomModel = ViewBindings.findChildViewById(rootView, id);
      if (etCustomModel == null) {
        break missingId;
      }

      id = R.id.etEndpoint;
      EditText etEndpoint = ViewBindings.findChildViewById(rootView, id);
      if (etEndpoint == null) {
        break missingId;
      }

      id = R.id.guideline_vertical;
      Guideline guidelineVertical = ViewBindings.findChildViewById(rootView, id);

      id = R.id.rvConfiguredProviders;
      RecyclerView rvConfiguredProviders = ViewBindings.findChildViewById(rootView, id);
      if (rvConfiguredProviders == null) {
        break missingId;
      }

      id = R.id.scrollConfig;
      ScrollView scrollConfig = ViewBindings.findChildViewById(rootView, id);

      id = R.id.spinnerProvider;
      Spinner spinnerProvider = ViewBindings.findChildViewById(rootView, id);
      if (spinnerProvider == null) {
        break missingId;
      }

      id = R.id.tvActiveProvider;
      TextView tvActiveProvider = ViewBindings.findChildViewById(rootView, id);
      if (tvActiveProvider == null) {
        break missingId;
      }

      id = R.id.tvProviderNotes;
      TextView tvProviderNotes = ViewBindings.findChildViewById(rootView, id);
      if (tvProviderNotes == null) {
        break missingId;
      }

      id = R.id.tvTitle;
      TextView tvTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvTitle == null) {
        break missingId;
      }

      return new ActivitySettingsBinding(rootView, btnDelete, btnSave, btnSetActive,
          cardActiveProvider, cardConfiguredProviders, cardProviderConfig, etApiKey, etCustomModel,
          etEndpoint, guidelineVertical, rvConfiguredProviders, scrollConfig, spinnerProvider,
          tvActiveProvider, tvProviderNotes, tvTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
